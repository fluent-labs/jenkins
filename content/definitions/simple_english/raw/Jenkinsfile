import groovy.json.JsonSlurper

def dictionary = 'simplewiktionary'
def latest_wiktionary_version = null
def latest_downloaded_version = null

def get_latest_wiktionary_version(dictionary) {
  def rss_url = "https://dumps.wikimedia.org/$dictionary/latest/$dictionary-latest-pages-meta-current.xml.bz2-rss.xml"
  def filename = "$dictionary-latest-pages-meta-current.xml.bz2-rss.xml"

  sh "wget $rss_url"
  def xml = sh script: "cat $filename", returnStdout: true

  def parsed = new XmlSlurper().parseText(xml)
  def link = parsed.channel.link.text()
  
  return (link =~ /.*\/([0-9]+)/)[ 0 ][ 1 ].toString().trim()
}

def get_hash_for_version(dictionary, version) {
  sh "wget https://dumps.wikimedia.org/$dictionary/$version/dumpstatus.json"
  def json = sh script: "cat dumpstatus.json", returnStdout: true

  def parsed = new JsonSlurper().parseText(json)
  return parsed.jobs.metacurrentdump.files.get("$dictionary-$version-pages-meta-current.xml.bz2").sha1.toString().trim()
}

def get_wiktionary_dump(dictionary, version) {
  def dump_url = "http://download.wikimedia.org/$dictionary/$version/$dictionary-$version-pages-meta-current.xml.bz2"
  def archive_filename = "$dictionary-$version-pages-meta-current.xml.bz2"
  
  // Download the archive
  sh "wget $dump_url"
  
  // Check the hash
  def expected_hash = get_hash_for_version(dictionary, version)
  def actual_hash = sh script: "sha1sum $archive_filename", returnStdout: true
  actual_hash = (actual_hash =~ /([^ ]+) .*/)[ 0 ][ 1 ].toString().trim()
  echo "Expected: $expected_hash, actual: $actual_hash"
  if (actual_hash != expected_hash) {
    throw new IllegalStateException("Download hash did not match, expected: $expected_hash, actual: $actual_hash")
  }
  
  // Unzip it
  sh "bzip2 -d $archive_filename"

  return "$dictionary-$version-pages-meta-current.xml"
}

def get_latest_processed_version(dictionary) {
  try {
    sh "s3cmd --host 'fra1.digitaloceanspaces.com' --host-bucket '%(bucket)s.fra1.digitaloceanspaces.com' get s3://definitions/$dictionary/latest_version.txt"
    def latest_version = sh script: "cat latest_version.txt", returnStdout: true
    sh "rm latest_version.txt"
    return latest_version.toString().trim()
  } catch (Exception e) {
    echo "Couldn't get latest processed version. Is this the first time you're running this?"
    echo 'Exception occurred: ' + e.toString()
    return null
  }
}

def put_latest_processed_version(dictionary, latest_version) {
  sh """
  echo $latest_version > latest_processed_version.txt
  s3cmd --host 'fra1.digitaloceanspaces.com' --host-bucket '%(bucket)s.fra1.digitaloceanspaces.com' put latest_processed_version.txt s3://definitions/$dictionary/latest_version.txt
  """
}

pipeline {
  agent {
    kubernetes {
      yaml '''
        apiVersion: v1
        kind: Pod
        metadata:
          namespace: content
        spec:
          imagePullSecrets:
          - 'dockerhub'
          containers:
          - name: s3
            image: lkjaero/jenkins-runners:s3
            imagePullPolicy: Always
            command:
            - sleep
            args:
            - 99d
            env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: do-spaces-access-key
                  key: username
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: do-spaces-access-key
                  key: password
        '''
    }
  }
  stages {
    stage("Check download") {
      steps {
        container('s3') {
          script {
            latest_wiktionary_version = get_latest_wiktionary_version(dictionary)
            latest_downloaded_version = get_latest_processed_version(dictionary)

            echo "Latest $dictionary version: $latest_wiktionary_version"
            echo "Latest processed $dictionary version: $latest_downloaded_version"
          }
        }
      }
    }
    stage("Download latest") {
      when { not { equals expected: latest_wiktionary_version, actual: latest_downloaded_version } }
      steps {
        container('s3') {
          script {
            echo "Fetching newer $dictionary version $latest_wiktionary_version."
            def dump_file = get_wiktionary_dump(dictionary, latest_wiktionary_version)
            
            sh "s3cmd --host 'fra1.digitaloceanspaces.com' --host-bucket '%(bucket)s.fra1.digitaloceanspaces.com' put $dump_file s3://definitions/$dictionary/$latest_version/raw/$dump_file"
        
            put_latest_processed_version(dictionary, latest_wiktionary_version)
          }
        }
      }
    }
  }
}